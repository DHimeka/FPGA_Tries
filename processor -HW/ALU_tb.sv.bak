module ALU_Testbench;

    // Parameters
    localparam DATA_WIDTH = 32;
    localparam OPCODE_LENGTH = 4;

    // Signals
    reg [DATA_WIDTH-1:0] SrcA;
    reg [DATA_WIDTH-1:0] SrcB;
    reg [OPCODE_LENGTH-1:0] Operation;
    wire [DATA_WIDTH-1:0] ALUResult;
    wire Con_BLT;
    wire Con_BGT;
    wire zero;

    // Instantiate the ALU module
    ALU #(DATA_WIDTH, OPCODE_LENGTH) uut (
        .SrcA(SrcA),
        .SrcB(SrcB),
        .Operation(Operation),
        .ALUResult(ALUResult),
        .Con_BLT(Con_BLT),
        .Con_BGT(Con_BGT),
        .zero(zero)
    );

    // Test vectors
    initial begin
        // Test case 1: ADD
        SrcA = 32'h00000001;
        SrcB = 32'h00000002;
        Operation = 4'b0000;
        #10;
        // Check ALUResult and other flags for ADD
        if (ALUResult !== 32'h00000003 || Con_BLT !== 1'b0 || Con_BGT !== 1'b0 || zero !== 1'b0)
            $display("Test case 1 (ADD) failed");

        // Test case 2: SUB
        SrcA = 32'h00000003;
        SrcB = 32'h00000001;
        Operation = 4'b1000;
        #10;
        // Check ALUResult and other flags for SUB
        if (ALUResult !== 32'h00000002 || Con_BLT !== 1'b0 || Con_BGT !== 1'b0 || zero !== 1'b0)
            $display("Test case 2 (SUB) failed");

        // Add more test cases for other instructions
        // Example test cases for some instructions:

        // Test case 3: SLL
        SrcA = 32'h00000001;
        SrcB = 32'h00000002; // Shift left by 2
        Operation = 4'b0010;
        #10;
        // Check ALUResult for SLL
        if (ALUResult !== 32'h00000004)
            $display("Test case 3 (SLL) failed");

        // Test case 4: SLTU
        SrcA = 32'h00000001;
        SrcB = 32'h00000002;
        Operation = 4'b1101;
        #10;
        // Check ALUResult for SLTU
        if (ALUResult !== 1'b1)
            $display("Test case 4 (SLTU) failed");

        // Add more test cases for other instructions here

        $finish;
    end

endmodule
