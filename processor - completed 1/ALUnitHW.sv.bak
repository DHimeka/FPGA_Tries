module ALUnit #(
    parameter DATA_WIDTH = 32,
    parameter OPCODE_LENGTH = 7,
    parameter FUNCT3_LENGTH = 3,
    parameter FUNCT7_LENGTH = 7 // Declare FUNCT7_LENGTH only once
)(
    input logic [DATA_WIDTH-1:0] rs1,
    input logic [DATA_WIDTH-1:0] rs2,
    input logic [OPCODE_LENGTH-1:0] Opcode,
    input logic [FUNCT3_LENGTH-1:0] Funct3,
    input logic [FUNCT7_LENGTH-1:0] Funct7, // Include FUNCT7 for instructions like ADD and SUB
    output logic [DATA_WIDTH-1:0] rd,
    output logic Con_BLT,
    output logic Con_BGT,
    output logic zero
);

always_comb begin
    rd = 'd0;
    Con_BLT = 'b0;
    Con_BGT = 'b0;
    zero = 'b0;

    case(Opcode)
        // OPCODE for R-type instructions
        7'b0110011: begin
            case(Funct3)
                // funct3 for ADD
                3'b000: begin
                    case(Funct7)
                        7'b0000000: rd = rs1 + rs2; // ADD
                        7'b0100000: rd = rs1 - rs2; // SUB
                        default: rd = 'b0; // Invalid FUNCT7 value
                    endcase
                end

                // funct3 for SLL
                3'b001: rd = rs1 << (rs2[4:0] & 0x1F);

                // funct3 for SLT
                3'b010: rd = (rs1 < rs2) ? 1'b1 : 1'b0;

                // funct3 for SLTU
                3'b011: rd = (rs1 < rs2) ? 1'b1 : 1'b0;

                // funct3 for XOR
                3'b100: rd = rs1 ^ rs2;

                // funct3 for SRL
                3'b101: rd = rs1 >> (rs2[4:0] & 0x1F);

                // funct3 for SRA
                3'b101: rd = $signed(rs1) >>> (rs2[4:0] & 0x1F);

                // funct3 for OR
                3'b110: rd = rs1 | rs2;

                // funct3 for AND
                3'b111: rd = rs1 & rs2;

                default: rd = 'b0;
            endcase
        end

        // OPCODE for I-type instructions
        7'b0010011: begin
            case(Funct3)
                // funct3 for ADDI
                3'b000: rd = rs1 + {{(DATA_WIDTH-12){rs2[11]}}, rs2};

                // funct3 for SLTI
                3'b010: rd = (rs1 < {{(DATA_WIDTH-12){rs2[11]}}, rs2}) ? 1'b1 : 1'b0;

                // funct3 for SLTIU
                3'b011: rd = (rs1 < {{(DATA_WIDTH-12){rs2[11]}}, rs2}) ? 1'b1 : 1'b0;

                // funct3 for XORI
                3'b100: rd = rs1 ^ {{(DATA_WIDTH-12){rs2[11]}}, rs2};

                // funct3 for ORI
                3'b110: rd = rs1 | {{(DATA_WIDTH-12){rs2[11]}}, rs2};

                // funct3 for ANDI
                3'b111: rd = rs1 & {{(DATA_WIDTH-12){rs2[11]}}, rs2};

                // funct3 for SLLI
                3'b001: rd = rs1 << (rs2[4:0] & 0x1F);

                // funct3 for SRLI
                3'b101: rd = rs1 >> (rs2[4:0] & 0x1F);

                // funct3 for SRAI
                3'b101: rd = $signed(rs1) >>> (rs2[4:0] & 0x1F);

                default: rd = 'b0;
            endcase
        end
				
        // OPCODE for LUI (Load Upper Immediate)
        7'b0110111: begin
            rd = {{DATA_WIDTH-12{rs2[11]}}, rs2};
        end

        // OPCODE for AUIPC (Add Upper Immediate to PC)
        7'b0010111: begin
            rd = rs1 + {{DATA_WIDTH-12{rs2[11]}}, rs2};
        end

        // OPCODE for other instruction classes (e.g., Load, Store, etc.)
        // ...

        default: rd = 'b0;
    endcase
end

endmodule
