module ControlUnit #(
    parameter OPCODE_LENGTH = 7,
    parameter FUNCT3_LENGTH = 3,
    parameter FUNCT7_LENGTH = 7 

)(
	input logic isALUreg, regWrite,

	input logic [OPCODE_LENGTH-1:0] Opcode,
   input logic [FUNCT3_LENGTH-1:0] Funct3,
   input logic [FUNCT7_LENGTH-1:0] Funct7,
	
	output logic [6:0] aluControl_signal



);

		always_comb begin
     
        case(Opcode)
            // OPCODE for R-type instructions
            7'b0110011: begin
                case(Funct3)
                    // funct3 for ADD
                    3'b000: begin
                        case(Funct7)
                            7'b0000000: aluControl_signal <= 7'h1  // ADD
                            7'b0100000: aluControl_signal <= 7'h2, // SUB
													
                   
                            default: aluControl_signal = 7'h0; // Invalid FUNCT7 value
                        endcase
                    end

                    // funct3 for SLL
                    3'b001: aluControl_signal <= 7'h3; // Corrected the mask to 5 bits

                    // funct3 for SLT
                    3'b010: aluControl_signal <= 7'h4;

                    // funct3 for SLTU
                    3'b011: aluControl_signal <= 7'h5;

                    // funct3 for XOR
                    3'b100: aluControl_signal <= 7'h6;

                    // funct3 for SRL/SRA
                    3'b101: begin
                        case(Funct7)
                            7'b0000000: aluControl_signal <= 7'h7; // Corrected the mask to 5 bits
                            7'b0100000: aluControl_signal <= 7'h8; // Corrected the mask to 5 bits
                            default: aluControl_signal <= 7'h0; // Invalid FUNCT7 value
                        endcase
                    end

                    // funct3 for OR
                    3'b110: aluControl_signal <= 7'h9;

                    // funct3 for AND
                    3'b111: aluControl_signal <= 7'ha;

                    default: aluControl_signal = 7'h0;
                endcase
            end
				endcase
	end
endmodule