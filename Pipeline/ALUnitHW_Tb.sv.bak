module ALUnitHW_TestBench();

    // Parameters
    localparam DATA_WIDTH = 32;
    localparam OPCODE_LENGTH = 7;
    localparam FUNCT3_LENGTH = 3;
    localparam FUNCT7_LENGTH = 7;

    // Inputs
    reg [DATA_WIDTH-1:0] rs1;
    reg [DATA_WIDTH-1:0] rs2;
    reg [OPCODE_LENGTH-1:0] Opcode;
    reg [FUNCT3_LENGTH-1:0] Funct3;
    reg [FUNCT7_LENGTH-1:0] Funct7;

    // Outputs
    wire [DATA_WIDTH-1:0] rd;
    wire Con_BLT;
    wire Con_BGT;
    wire zero;

    // Instantiate the module under test
    ALUnitHW #(DATA_WIDTH, OPCODE_LENGTH, FUNCT3_LENGTH, FUNCT7_LENGTH)
        dut (
            .rs1(rs1),
            .rs2(rs2),
            .Opcode(Opcode),
            .Funct3(Funct3),
            .Funct7(Funct7),
            .rd(rd),
            .Con_BLT(Con_BLT),
            .Con_BGT(Con_BGT),
            .zero(zero)
        );

    // Clock generation (assuming a 50 MHz clock)
    reg clock = 0;
    always begin
        #5 clock = ~clock;
    end

    // Test cases
    initial begin
        // Test case 1: ADD instruction
        rs1 = 5;
        rs2 = 10;
        Opcode = 7'b0110011; // ADD instruction
        Funct3 = 3'b000;    // Funct3 for ADD
        Funct7 = 7'b0000000; // Funct7 for ADD
        #10; // Allow some time for the computation
        $display("Test case 1: ADD result = %d", rd);
        if (rd === 15) // Expected result
            $display("Test case 1 passed");
        else
            $display("Test case 1 failed");

        // Test case 2: ADDI instruction
        rs1 = 20;
        rs2 = 5;
        Opcode = 7'b0010011; // ADDI instruction
        Funct3 = 3'b000;     // Funct3 for ADDI
        Funct7 = 0;          // Funct7 is not used for ADDI
        #10; // Allow some time for the computation
        $display("Test case 2: ADDI result = %d", rd);
        if (rd === 25) // Expected result
            $display("Test case 2 passed");
        else
            $display("Test case 2 failed");

        // Add more test cases as needed...

        // Finish simulation
        $finish;
    end

endmodule
